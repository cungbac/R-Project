#library
library(caret)
library(tidyverse)
library(mlbench) # To employ BostonHousing data
#insstall package
iinstall.packages("mlbench")
#insstall package
install.packages("mlbench")
library(mlbench) # To employ BostonHousing data
library(leaps) # To apply stepwise, backward and forward regression
install.packages("leaps")
library(leaps) # To apply stepwise, backward and forward regression
# Data
data(BostonHousing)
head(BostonHousing)
str(BostonHousing)
#------------------------buoi01122019---------------------------#
#Metric
##R-squared
###RMSE
#chia data thanh 68-30
#dung base R, dplyr slice
data("Prestige")
library(caret)
library(tidyverse)
library(car)
library(summarytools)
library(plotly)
library(broom)
#------------------------buoi01122019---------------------------#
#Metric
##R-squared
###RMSE
#chia data thanh 68-30
#dung base R, dplyr slice
data("Prestige")
Prestige<-Prestige[complete.cases(Prestige),-5]
#step 2: split data into tranning and test set
set.seed(1)
nrow(Prestige) #bn dong
1:nrow(Prestige)
nrow(BostonHousing) #bn dong
train_index=sample(1:nrow(BostonHousing), size=356) #lay ngau nhien 356 trong data tu 1:356
bh=data(BostonHousing)
bh=data(BostonHousing)
bh=data(BostonHousing)
bh
# Data
data(BostonHousing)  "du lieu nha cuoc dieu tra dan so 1970"
# Data
data(BostonHousing)  "du lieu nha cuoc dieu tra dan so 1970"
bh=data(BostonHousing)
bh=data(BostonHousing)
library(mlbench) # To employ BostonHousing data
library(leaps) # To apply stepwise, backward and forward regression
# Data
data(BostonHousing)  "du lieu nha cuoc dieu tra dan so 1970"
View(BostonHousing)
# Data
data(BostonHousing)  "du lieu nha cuoc dieu tra dan so 1970"
library(caret)
library(tidyverse)
library(mlbench) # To employ BostonHousing data
library(leaps)
# Data
data(BostonHousing)
# Data
data(BostonHousing)
# Data
data(BostonHousing)
head(BostonHousing)
str(BostonHousing)
# Data
bh=data(BostonHousing)
bh
# Data
bh<-data(BostonHousing)
bh
# Data
bh<-BostonHousing
bh
head(BostonHousing)
nrow(bh) #bn dong
train=bh[train_index,]
test=bh[-train_index,]
train_index=createDataPartition(bh$medv, p=0.7, list=F)
train_index
train=bh[train_index,]
test=bh[-train_index,]
str(train)
# Train control: tao ra 1 yeu cau, cho dl chay tren do
ctr <- trainControl(method="repeatedcv",
number=10,
repeats = 5)
control$method
ctr$method
ctr$number
str(train)
# Train models:
model_base <- train(medv~crim,
data=train,
method="lm",
trControl=ctr)#method nay la pp chay hoi quy
model_base
# Train models:
model_base <- train(medv~crim,
data=train,
method="lm",
trControl=ctr)#method nay la pp chay hoi quy
# Train models:
model_base <- train(medv~crim,
data=train,
method="lm",
trControl=ctr)#method nay la pp chay hoi quy
#insstall package
install.packages("mlbench")
install.packages("leaps")
#library
library(caret)
library(tidyverse)
library(mlbench) # To employ BostonHousing data
library(leaps) # To apply stepwise, backward and forward regression
# Data
data(BostonHousing)
bh<-BostonHousing
head(BostonHousing)
str(BostonHousing)
"medv: la bien muc tieu: gia tri tb cua 1 nhaf o cua chu so huu trong 1000$"
# Data split: train and test data
set.seed(1)
nrow(bh) #bn dong
train_index1=sample(1:nrow(bh), size=356) #lay ngau nhien 356 trong data tu 1:356
train_index=createDataPartition(bh$medv, p=0.7, list=F)
"#dung bien phu thuoc lay mau, lay sample(mau) huong vao dau ra ,
lam bth lay row de truy cap
g#TRANH Th do, lay mau huong vao dau ra , list=T hoi phuc tap"
train=bh[train_index,]
str(train)
test=bh[-train_index,]
# Train control: kiem soat tao ra 1 yeu cau, cho dl chay tren do
ctr <- trainControl(method="repeatedcv",
number=10,
repeats = 5)
"method cach ma no chia mau, repeat 10 mau lay lai 5lan: chia dl khac nhau"
ctr$method
ctr$number
# Train models:
model_base <- train(medv~crim,
data=train,
method="lm",
trControl=ctr)#method nay la pp chay hoi quy
model_dummy <-
model_interaction <-
model_stepwise <-
model_backward <-
model_forward <-
# Explore the results: 6 final models
lm$resample #lay mau co thay the , 2 mau chay 5 lan thanh 10
lm$finalModel
summary(lm)
# Calculate fitted values of 6 final models and add them into dataframe
# Calculate residuals of 6 final models and add them into dataframe
# Residuals analysis of 6 final models
plot(model_)
# Compare peformance of 6 final models:
# Predicted value of 6 final models:
# Evaluate 6 final models:
model_base
#insstall package
install.packages("mlbench")
install.packages("leaps")
#library
library(caret)
library(tidyverse)
library(mlbench) # To employ BostonHousing data
library(leaps) # To apply stepwise, backward and forward regression
# Data
data(BostonHousing)
bh<-BostonHousing
head(BostonHousing)
str(BostonHousing)
"medv: la bien muc tieu: gia tri tb cua 1 nhaf o cua chu so huu trong 1000$"
# Data split: train and test data
set.seed(1)
nrow(bh) #bn dong
train_index1=sample(1:nrow(bh), size=356) #lay ngau nhien 356 trong data tu 1:356
train_index=createDataPartition(bh$medv, p=0.7, list=F)
"#dung bien phu thuoc lay mau, lay sample(mau) huong vao dau ra ,
lam bth lay row de truy cap
g#TRANH Th do, lay mau huong vao dau ra , list=T hoi phuc tap"
train=bh[train_index,]
str(train)
test=bh[-train_index,]
# Train control: kiem soat tao ra 1 yeu cau, cho dl chay tren do
ctr <- trainControl(method="repeatedcv",
number=10,
repeats = 5)
"method cach ma no chia mau, repeat 10 mau lay lai 5lan: chia dl khac nhau"
ctr$method
ctr$number
# Train models:
model_base <- train(medv~crim,
data=train,
method="lm",
trControl=ctr)#method nay la pp chay hoi quy
model_dummy <-
model_interaction <-
model_stepwise <-
model_backward <-
model_forward <-
# Explore the results: 6 final models
lm$resample #lay mau co thay the , 2 mau chay 5 lan thanh 10
lm$finalModel
summary(lm)
# Calculate fitted values of 6 final models and add them into dataframe
# Calculate residuals of 6 final models and add them into dataframe
# Residuals analysis of 6 final models
plot(model_)
# Compare peformance of 6 final models:
# Predicted value of 6 final models:
# Evaluate 6 final models:
str(BostonHousing)
#insstall package
install.packages("mlbench")
install.packages("leaps")
#library
library(caret)
library(tidyverse)
library(mlbench) # To employ BostonHousing data
library(leaps) # To apply stepwise, backward and forward regression
# Data
data(BostonHousing)
head(BostonHousing)
str(BostonHousing)
# Data split: train and test data
set.seed(1)
nrow(BostonHousing) #bn dong
train_index=createDataPartition(bh$medv, p=0.7, list=F)
train=BostonHousing[train_index,]
str(train)
test=BostonHousing[-train_index,]
# Train control: kiem soat tao ra 1 yeu cau, cho dl chay tren do
ctr <- trainControl(method="repeatedcv",
number=10,
repeats = 5)
ctr$method
ctr$number
# Train models:
model_base <- train(medv~crim,
data=train,
method="lm",
trControl=ctr)
model_dummy <-lm(medv~chas, BostonHousing)
model_interaction <-lm(medv~crim +chas+crim:chas, BostonHousing)
river=BostonHousing%>%
filter(chas==1)
lm(medv~ crim, river)
other=BostonHousing%>%
filter(chas==0)
lm(medv~ crim, other)
model_stepwise <-
model_backward <-
model_forward <-
# Explore the results: 6 final models
lm$resample #lay mau co thay the , 2 mau chay 5 lan thanh 10
lm$finalModel
summary(lm)
# Calculate fitted values of 6 final models and add them into dataframe
# Calculate residuals of 6 final models and add them into dataframe
# Residuals analysis of 6 final models
plot(model_)
# Compare peformance of 6 final models:
# Predicted value of 6 final models:
# Evaluate 6 final models:
str(BostonHousing)
str(BostonHousing$rad)
table(BostonHousing$rad)
model_interaction <-lm(medv~rad +chas+crim:chas, BostonHousing)
river=BostonHousing%>%
filter(chas==1)
other=BostonHousing%>%
filter(chas==0)
lm(medv~ rad, river)
lm(medv~ rad, other)
other=BostonHousing%>%
filter(chas==0)
# Train models:
model_base <- train(medv~rad,
data=train,
method="lm",
trControl=ctr)
model_base
